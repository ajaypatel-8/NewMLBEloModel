setwd("~/Downloads/RFiles/baseball/MLBEloModel")
library(baseballr)
library(tidyverse)
library(purrr)
library(zoo)
library(roll)
#read in sp_probables csv
sp_probables <- read_csv('sp_probables.csv')
#test result to see what columns i want
statlines1 <- mlb_player_game_stats(game_pk = 446896, person_id  = 592789)
#these are the columns i want lmfao // join to probables once logged on game pk
statlines1 <- statlines1 %>% filter(group == 'pitching') %>% select(player_id,
game_pk,
innings_pitched,
batters_faced,
strike_outs,
base_on_balls)
#grab column names
colnames <- colnames(statlines1)
#create empty df
statlines <- data.frame(matrix(ncol = length(colnames)))
colnames(statlines) <- colnames
for (i in 1:nrow(sp_probables)) {
current_percentage <- round(i / nrow(sp_probables) * 100)
#check if the current percentage is a multiple of 5
if (current_percentage %% 5 == 0) {
cat(paste0(current_percentage, '% completed\n'))
}
#extract id and game_pk for the current row
id <- sp_probables$id[i]
game_pk <- sp_probables$game_pk[i]
tryCatch({
#call the mlb_player_game_stats function
stats <- mlb_player_game_stats(game_pk = game_pk, person_id = id)
#only want pitching stats
stats <- stats %>% filter(group == 'pitching') %>% select(player_id,
game_pk,
innings_pitched,
batters_faced,
strike_outs,
base_on_balls)
#append the results to the statlines data frame
statlines <- rbind(statlines, stats)
#sleep timer to prevent api limits
Sys.sleep(c(0.002, 0.3, 0.09, 0.1))
}, error = function(e) {
#handle the error -> most are either due to na's in sp_id column (no probable listed)
#or pitcher was switched after the probable
cat("Error in sp_id: ", id, " game_pk: ", game_pk, "iteration", i, ":", conditionMessage(e), "\n")
})
}
setwd("~/Downloads/RFiles/baseball/MLBEloModel")
library(baseballr)
library(tidyverse)
library(purrr)
library(zoo)
library(roll)
#read in sp_probables csv
sp_probables <- read_csv('sp_probables.csv')
#test result to see what columns i want
statlines1 <- mlb_player_game_stats(game_pk = 446896, person_id  = 592789)
#these are the columns i want lmfao // join to probables once logged on game pk
statlines1 <- statlines1 %>% filter(group == 'pitching') %>% select(player_id,
game_pk,
innings_pitched,
batters_faced,
strike_outs,
base_on_balls)
#grab column names
colnames <- colnames(statlines1)
#create empty df
statlines <- data.frame(matrix(ncol = length(colnames)))
colnames(statlines) <- colnames
#so the % message doesn't print the same multiple times
last_printed_percentage <- 0
for (i in 1:nrow(sp_probables)) {
print(i)
current_percentage <- round(i / nrow(sp_probables) * 100)
#check if the current percentage is a multiple of 5
if (current_percentage %% 5 == 0 && current_percentage != last_printed_percentage) {
cat(paste0(current_percentage, '% completed\n'))
last_printed_percentage <- current_percentage  # Update the last printed percentage
}
#extract id and game_pk for the current row
id <- sp_probables$id[i]
game_pk <- sp_probables$game_pk[i]
tryCatch({
#call the mlb_player_game_stats function
stats <- mlb_player_game_stats(game_pk = game_pk, person_id = id)
#only want pitching stats
stats <- stats %>% filter(group == 'pitching') %>% select(player_id,
game_pk,
innings_pitched,
batters_faced,
strike_outs,
base_on_balls)
#append the results to the statlines data frame
statlines <- rbind(statlines, stats)
#sleep timer to prevent api limits
Sys.sleep(c(0.002, 0.3, 0.09, 0.1))
}, error = function(e) {
#handle the error -> most are either due to na's in sp_id column (no probable listed)
#or pitcher was switched after the probable
cat("Error in sp_id: ", id, " game_pk: ", game_pk, "iteration", i, ":", conditionMessage(e), "\n")
})
}
setwd("~/Downloads/RFiles/baseball/MLBEloModel")
library(baseballr)
library(tidyverse)
library(purrr)
library(zoo)
library(roll)
#read in sp_probables csv
sp_probables <- read_csv('sp_probables.csv')
#test result to see what columns i want
statlines1 <- mlb_player_game_stats(game_pk = 446896, person_id  = 592789)
#these are the columns i want lmfao // join to probables once logged on game pk
statlines1 <- statlines1 %>% filter(group == 'pitching') %>% select(player_id,
game_pk,
innings_pitched,
batters_faced,
strike_outs,
base_on_balls)
#grab column names
colnames <- colnames(statlines1)
#create empty df
statlines <- data.frame(matrix(ncol = length(colnames)))
colnames(statlines) <- colnames
#so the % message doesn't print the same multiple times
last_printed_percentage <- -1
for (i in 1:nrow(sp_probables)) {
print(i)
current_percentage <- round(i / nrow(sp_probables) * 100)
#check if the current percentage is a multiple of 5
if (current_percentage %% 5 == 0 && current_percentage != last_printed_percentage) {
cat(paste0(current_percentage, '% COMPLETED\n'))
last_printed_percentage <- current_percentage  # Update the last printed percentage
}
#extract id and game_pk for the current row
id <- sp_probables$id[i]
game_pk <- sp_probables$game_pk[i]
tryCatch({
#call the mlb_player_game_stats function
stats <- mlb_player_game_stats(game_pk = game_pk, person_id = id)
#only want pitching stats
stats <- stats %>% filter(group == 'pitching') %>% select(player_id,
game_pk,
innings_pitched,
batters_faced,
strike_outs,
base_on_balls)
#append the results to the statlines data frame
statlines <- rbind(statlines, stats)
#sleep timer to prevent api limits
Sys.sleep(c(0.002, 0.3, 0.09, 0.1))
}, error = function(e) {
#handle the error -> most are either due to na's in sp_id column (no probable listed)
#or pitcher was switched after the probable
cat("Error in sp_id: ", id, " game_pk: ", game_pk, "iteration", i, ":", conditionMessage(e), "\n")
})
}
statlines_copy <- statlines
View(statlines)
nrow(statlines)
nrow(sp_probables)
write_csv(statlines, 'statlines.csv')
